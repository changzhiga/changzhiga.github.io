<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Git 及 GitHub 配置指南]]></title>
    <url>%2F2018%2F08%2F14%2FGit-%E5%8F%8A-GitHub-%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[Hexo 博客搭建]]></title>
    <url>%2F2018%2F08%2F14%2FHexo%20%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[GitHub Pages创建 GitHub 仓库新建名为[[username]].github.io的仓库，https://[[username]].github.io为博客的访问地址。 配置 Git参考《Git 及 GitHub 配置指南》 Hexo安装 Hexo 框架12cd ~/Dropbox/Projects;mkdir hexo 1npm install -g hexo 操作命令初始化12cd ~/Dropbox/Projects/hexo;hexo init 生成静态文件1hexo g 执行以上命令之后，Hexo会在 public 文件夹生成相关 html 文件，这些文件将提交到 GitHub 仓库。 本地预览1hexo s --debug 打开浏览器访问 http://localhost:4000 即可看到内容，Ctrl+C 停止本地预览。 新建文章1hexo new "postName" 可以在~/hexo/scaffolds/中自定义模板，模板将声明文章的标题、时间、标签等信息：1234567---title: &#123;&#123; title &#125;&#125;date: &#123;&#123; date &#125;&#125;tags:categories:description:--- 以 blog.md 为例，以后新建文章用：1hexo new blog "postName" #缩写：hnb 其他命令12345hexo generate #生成静态页面至public目录hexo server #开启预览访问端口hexo deploy #部署到GitHubhexo help #查看帮助hexo version #查看Hexo的版本 12hexo s -g #生成并本地预览hexo d -g #生成并上传到 GitHub 主题设定主题设定可参考 NexT 官方使用指南。 安装 NexT12cd ~/Dropbox/Projects/hexo;git clone https://github.com/iissnan/hexo-theme-next themes/next 启用并验证主题编辑站点配置文件_config.yml，将theme字段更改为next；执行hexo s --debug在本地验证主题。 主题优化主页文章边框添加阴影编辑themes/next/source/css/_custom下的custom.styl： 12345678// 主页文章添加阴影效果.post &#123; margin-top: 0px; margin-bottom: 60px; padding: 25px; -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5); -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5);&#125; 自定义代码块样式编辑themes/next/source/css/_custom下的custom.styl： 123456789101112131415// code stylescode &#123; color: #ff7600; background: #fbf7f8; margin: 2px;&#125;// code highlight styles.highlight, pre &#123; margin: 5px 0; padding: 5px; border-radius: 3px;&#125;.highlight, code, pre &#123; border: 1px solid #d6d6d6;&#125; 代码块复制按钮 下载 clipboard.min.js，将文件保存在./themes/next/source/js/src 在./themes/next/source/js/src目录下新建clipboard-use.js： 1234567891011121314151617/*页面载入完成后，创建复制按钮*/!function (e, t, a) &#123; /* code */var initCopyCode = function()&#123; var copyHtml = ''; copyHtml += '&lt;button class="btn-copy" data-clipboard-snippet=""&gt;'; copyHtml += ' &lt;i class="fa fa-globe"&gt;&lt;/i&gt;&lt;span&gt;copy&lt;/span&gt;'; copyHtml += '&lt;/button&gt;'; $(".highlight .code pre").before(copyHtml); new ClipboardJS('.btn-copy', &#123; target: function(trigger) &#123; return trigger.nextElementSibling; &#125; &#125;);&#125;initCopyCode();&#125;(window, document); 在./themes/next/source/css/_custom/custom.styl样式文件中添加如下代码： 123456789101112131415161718192021222324252627282930313233343536//代码块复制按钮.highlight&#123; //方便copy代码按钮（btn-copy）的定位 position: relative;&#125;.btn-copy &#123; display: inline-block; cursor: pointer; background-color: #eee; background-image: linear-gradient(#fcfcfc,#eee); border: 1px solid #d5d5d5; border-radius: 3px; -webkit-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; -webkit-appearance: none; font-size: 13px; font-weight: 700; line-height: 20px; color: #333; -webkit-transition: opacity .3s ease-in-out; -o-transition: opacity .3s ease-in-out; transition: opacity .3s ease-in-out; padding: 2px 6px; position: absolute; right: 5px; top: 5px; opacity: 0;&#125;.btn-copy span &#123; margin-left: 5px;&#125;.highlight:hover .btn-copy&#123; opacity: 1;&#125; 在./themes/next/layout/_layout.swig的末尾添加引用： 123&lt;!-- 代码块复制功能 --&gt;&lt;script type="text/javascript" src="/js/src/clipboard.min.js"&gt;&lt;/script&gt; &lt;script type="text/javascript" src="/js/src/clipboard-use.js"&gt;&lt;/script&gt; 字数和阅读时间统计 在 Hexo 站点下，安装hexo-wordcount插件： 1npm i --save hexo-wordcount 编辑主题配置文件的post_wordcount字段： 12345678# Post wordcount display settings# Dependencies: https://github.com/willin/hexo-wordcountpost_wordcount: item_text: true wordcount: true min2read: true totalcount: false separated_meta: true 修改文章内文本连接样式为蓝色打开themes/next/source/css/_custom下的custom.styl，添加代码： 1234567891011// 文章内链接文本样式.post-body p a&#123; color: #0593d3; border-bottom: none; border-bottom: 1px solid #0593d3; &amp;:hover &#123; color: #fc6423; border-bottom: none; border-bottom: 1px solid #fc6423; &#125;&#125; 博文置顶打开 Hexo 站点下的node_modules/hexo-generator-index/lib/generator.js，将代码全部替换为： 12345678910111213141516171819202122232425262728'use strict';var pagination = require('hexo-pagination');module.exports = function(locals)&#123; var config = this.config; var posts = locals.posts; posts.data = posts.data.sort(function(a, b) &#123; if(a.top &amp;&amp; b.top) &#123; // 两篇文章top都有定义 if(a.top == b.top) return b.date - a.date; // 若top值一样则按照文章日期降序排 else return b.top - a.top; // 否则按照top值降序排 &#125; else if(a.top &amp;&amp; !b.top) &#123; // 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233） return -1; &#125; else if(!a.top &amp;&amp; b.top) &#123; return 1; &#125; else return b.date - a.date; // 都没定义按照文章日期降序排 &#125;); var paginationDir = config.pagination_dir || 'page'; return pagination('', posts, &#123; perPage: config.index_generator.per_page, layout: ['index', 'archive'], format: paginationDir + '/%d/', data: &#123; __index: true &#125; &#125;);&#125;; 在文章的模板中添加top字段并设置数值，数值越大文章越靠前： 1234567---layout: layouttitle: 标签1date: 2017-08-18 15:41:18tags: 标签1top: 100--- 静态资源压缩 安装gulp： 1npm install gulp -g 安装gulp插件： 1234npm install gulp-minify-css --save;npm install gulp-htmlmin --save;npm install gulp-htmlclean --save;npm install gulp-uglify --save 在 Hexo 站点下添加gulpfile.js文件： 123456789101112131415161718192021222324252627282930313233343536373839404142var gulp = require('gulp');var minifycss = require('gulp-minify-css');var htmlmin = require('gulp-htmlmin');var htmlclean = require('gulp-htmlclean');var uglify = require('gulp-uglify');// 压缩 public 目录 cssgulp.task('minify-css', function() &#123; return gulp.src('./public/**/*.css') .pipe(minifycss()) .pipe(gulp.dest('./public'));&#125;);// 压缩 public 目录 htmlgulp.task('minify-html', function() &#123; return gulp.src('./public/**/*.html') .pipe(htmlclean()) .pipe(htmlmin(&#123; removeComments: true,//清除 HTML 注释 collapseWhitespace: true,//压缩 HTML collapseBooleanAttributes: true,//省略布尔属性的值 &lt;input checked="true"/&gt; ==&gt; &lt;input / removeEmptyAttributes: true,//删除所有空格作属性值 &lt;input id="" /&gt; ==&gt; &lt;input /&gt; removeScriptTypeAttributes: true,//删除 &lt;script&gt; 的 type="text/javascript" removeStyleLinkTypeAttributes: true,//删除 &lt;style&gt; 和 &lt;link&gt; 的 type="text/css" minifyJS: true,//压缩页面 JS minifyCSS: true,//压缩页面 CSS minifyURLs: true, &#125;)) .pipe(gulp.dest('./public'))&#125;);// 压缩js文件gulp.task('minify-js', function() &#123; return gulp.src(['./public/**/.js','!./public/js/**/*min.js']) .pipe(uglify()) .pipe(gulp.dest('./public'));&#125;);// 执行 gulp 命令时执行的任务gulp.task('default', [ 'minify-html','minify-css','minify-js']); 在package.json添加自动部署命令： 1234"scripts": &#123; "build": "hexo clean &amp;&amp; hexo g &amp;&amp; gulp &amp;&amp; hexo d", "test": "hexo clean &amp;&amp; hexo g &amp;&amp; gulp &amp;&amp; hexo s"&#125;, 运行npm run build即自动删除老文件，生成新文件，压缩html、css然后发布到github或其他静态服务器资源；运行npm run test即自动删除老文件，生成新文件，压缩html、css然后发布到本地服务器做预览。 开启版权声明编辑主题配置文件的post_copyright字段： 12345# Declare license on postspost_copyright: enable: true license: CC BY-NC-SA 3.0 license_url: https://creativecommons.org/licenses/by-nc-sa/3.0/ 修改文章底部带#号的标签打开themes/next/layout/_macro下的post.swig文件,搜索rel=&quot;tag&quot;&gt;#,将#换成&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;： 12345&lt;div class="post-tags"&gt; &#123;% for tag in post.tags %&#125; &lt;a href="&#123;&#123; url_for(tag.path) &#125;&#125;" rel="tag"&gt;&lt;i class="fa fa-tag"&gt;&lt;/i&gt; &#123;&#123; tag.name &#125;&#125;&lt;/a&gt; &#123;% endfor %&#125;&lt;/div&gt; 执行hexo clean，重新部署测试hexo s --debug。 添加顶部加载条打开主题配置文件，搜索关键字pace，设置为true，可以更换加载样式： 12345678910111213141516171819# Progress bar in the top during page loading.pace: true# Themes list:#pace-theme-big-counter#pace-theme-bounce#pace-theme-barber-shop#pace-theme-center-atom#pace-theme-center-circle#pace-theme-center-radar#pace-theme-center-simple#pace-theme-corner-indicator#pace-theme-fill-left#pace-theme-flash#pace-theme-loading-bar#pace-theme-mac-osx#pace-theme-minimal# For example# pace_theme: pace-theme-center-simplepace_theme: pace-theme-minimal #替换更换样式 添加本地搜索功能 在 Hexo 站点下安装插件： 1npm install hexo-generator-searchdb --save 在站点配置文件添加配置： 12345search: path: search.xml field: post format: html limit: 10000 将主题配置文件的local_search设置为true： 123456789# Local search# Dependencies: https://github.com/flashlab/hexo-generator-searchlocal_search: enable: true # if auto, trigger search by changing input # if manual, trigger search by pressing enter key or search button trigger: auto # show top n results per article, show all results by setting to -1 top_n_per_article: 1]]></content>
      <categories>
        <category>Tech</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[下载任意版本的 iOS App]]></title>
    <url>%2F2018%2F08%2F14%2F%E4%B8%8B%E8%BD%BD%E4%BB%BB%E6%84%8F%E7%89%88%E6%9C%AC%E7%9A%84%20iOS%20App%2F</url>
    <content type="text"><![CDATA[工具：iTunes 12 、 Fiddler for .NET4 、Charles 1. 获取 XML 打开 Fiddler，选择菜单栏 &gt; Tools &gt; Fiddler Options，在 HTTPS 选项卡中勾选 Decrypt HTTPS traffic，弹出窗口点 Yes，新弹出安装证书窗口选择“是”。 需要注意的是，整个过程都不要关闭 Fiddler，如果出现安装证书失败或打开 iTunes 无法加载页面的情况，可以参考下面的解决办法： Fiddler 菜单栏 &gt; Tools &gt; Fiddler Options &gt; HTTPS 选项卡；选择下方的 Export Root Certificate to Desktop；桌面上会出现一个 FiddlerRoot.cer 文件，右键安装证书；安装证书的位置选择第二个，并点击“浏览”，选择“信任的根证书存储”。 打开 iTunes（如之前已打开，需要关闭 iTunes 后重新打开），搜索想下载的 App（以下载 QQ 5.9.1 版为例）。 点击下载，等右上角出现箭头后删除下载（选中下载按两次 Delete 键）。 返回 Fiddler 将还在下载的项目删除。 在该删除的下载项上方找到域名为 p32-buy.itunes.apple.com、url开头为 /WebObjects/MZBuy.woa 的请求，切换右侧至 Inspectors 选项卡，并点击中间的黄色块 Response is encoded and may require decoding before inspection. Click here to transform. 保存该请求 右键请求 - Save - Response - Response Body。需要注意一点，如果没有点击黄色方块，将会保存一个乱码文件。 打开保存的 .xml 文件（系统默认一般是 IE 打开），向下翻动找到 softwareVersiIxternalIdentifiers 并伴随着一大串 xxxxxxxxxx 的项目。此处为该 App 自第一个版本起每个版本在 App Store 中的版本 ID，从后向前即为最新到最老。 2. 下载旧版本 App（以微信为例） 找到 App 的目标版本 ID，复制备用。 iTunes 中如果已经存在App的安装包要将其删除。 点击右上角搜索框，点 iTuens Store 选项卡，输入微信，并搜索。 搜索完成后，运行 Charles，然后切换回 iTunes，点击微信下方的下载按钮，微信开始下载。 注意：微信有下载进度时，立刻选中该项目，按键盘上的 Delete 键2次，删除当前下载。 打开 Charles 窗口，在 Sequence 选项卡，Host 一栏，可以找到类似 p数字-buy.itunes.apple.com 的字段，点击右键，勾选 Enable SSL Proxyiŋ 和 Breakpoints 两个选项。 切换回 iTunes 窗口，发现微信的状态仍然处于『正在下载』。不要紧，重新搜索『微信』。 重新搜索后，微信状态变为可下载。点击『下载』按钮，这时 Charles 会主动跳出，询问编辑请求。然后需要在 Charles 界面点击 Edit Request - XML Text，将 appExtVrsId 字段的键值改为816092740（目标版本ID）,这个键值对应的就是微信 6.3.10 版本的 BuildID。最后选择 Excute 按钮。 Charles 会再次弹出收到请求的包，不用管，直接点击 Excute 按钮，iTunes 会开始下载旧版本的微信。 注意：iTunes 下载旧版本过程中请勿关闭Charles。 等待下载结束，关闭 Charles，在 iTunes 资料库即可看到旧版本的微信。备份重要聊天记录后，卸载 iOS 上的新版微信，再使用 iTunes 重新安装旧版即可。 安装完成后，打开 iOS 设备的 设置 - iTunes Store 与 App Store，关闭更新选项卡，以防止微信自动更新。直到微信发布新版本修复推送。 注意：不要试图共享微信安装包，每个 iTunes Store 下载的 App 均有签名，他人无法安装。篡改 installd 除外。]]></content>
      <categories>
        <category>Tech</category>
      </categories>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ttRSS 的搭建]]></title>
    <url>%2F2018%2F08%2F14%2FttRSS%20%E7%9A%84%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[安装 Docker CE：提供 Docker 环境 PostgreSQL 数据库：存储 RSS 服务运行所需的记录；也可以使用 MySQL，但是前者的性能更好 Tiny Tiny RSS 安装 Docker CE： Ubuntu 设置仓库 更新 apt package index： 1sudo apt-get update 安装依赖包以允许 apt 通过 HTTPS 使用仓库： 12345sudo apt-get install \apt-transport-https \ca-certificates \curl \software-properties-common 添加 Docker 官方 GPG key： 1curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - 验证 GPG key 已安装： 1sudo apt-key fingerprint 0EBFCD88 显示以下内容说明安装成功： 1234pub 4096R/0EBFCD88 2017-02-22Key fingerprint = 9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88uid Docker Release (CE deb) &lt;docker@docker.com&gt;sub 4096R/F273FCD8 2017-02-22 安装 Docker 配置稳定版的仓库： 1234sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu \$(lsb_release -cs) \stable" 安装 Docker CE 更新 apt package index： 1sudo apt-get update 安装： 1sudo apt-get install docker-ce 测试是否安装成功： 1sudo docker run hello-world CentOS 设置仓库 安装 yum-utils： 1sudo yum install -y yum-utils 建立稳定的仓库： 123sudo yum-config-manager \--add-repo \https://docs.docker.com/v1.13/engine/installation/linux/repo_files/centos/docker.repo 安装 Docker 更新 yum package index： 1sudo yum makecache fast 安装最新版本的 Docker： 1sudo yum -y install docker-engine 运行 Docker： 1sudo systemctl start docker 测试运行状态： 1sudo docker run hello-world 安装 PostgreSQL 的 Docker 镜像，此镜像已预先配置完成以直接配合 RSS 镜像使用的数据库环境：12sudo docker pull nornagon/postgres \sudo docker run -d --name ttrssdb nornagon/postgres 安装 Tiny Tiny RSS 本体的镜像：12sudo docker pull fischerman/docker-ttrss \sudo docker run -d --link ttrssdb:db -p 8080:80 -e SELF_URL_PATH=http://[[IP_ADDRESS]]:8080 fischerman/docker-ttrss 其中: -p 8080:80：该参数表明，将该容器内应用的 80 端口（冒号后）映射到主机的 80 端口（冒号前）上；如果主机还需运行其他 80 端口的服务（如博客建站），则应将冒号前的值改为一个未被占用的端口；例如，-p 8080:80 将启用主机的 8080 端口。 -e SELF_URL_PATH=http://[[IP_ADDRESS]]:8080：该参数表明，该 Tiny Tiny RSS 应用将可从 http://[[IP_ADDRESS]] 访问；如果在上一步保持了默认的端口设置，则直接将上述网址换为你主机的 IP 地址（或解析至该主机的域名）即可，否则，应在地址之后进一步表明使用的端口，如：http://xxx.xxx.xxx.xxx:8080。 用插件添加主题、全文输出和多客户端支持安装主题（以仿 Feedly 主题为例）下载主题文件：tt-rss-feedly-theme-1.3.0 解压缩主题文件： 1sudo apt-get install unzip // 如果没有安装 unzip 1unzip master.zip 拷贝文件： 1docker ps # 查看当前 Docker 容器列表，找到 IMAGE 一列为 `[[fischerman/docker-ttrss]]` 的记录，复制其 `[[CONTAINER ID]]` 1sudo docker cp tt-rss-feedly-theme-master/feedly.css [[CONTAINER ID]]:/var/www/themes 1sudo docker cp tt-rss-feedly-theme-master/feedly [[CONTAINER ID]]:/var/www/themes 配置 RSS 全文输出注册 Mercury 并复制其 API 密钥，可以在 Web Parser 页面看到。 为 Tiny Tiny RSS 安装全文输出插件： 1git clone https://github.com/WangQiru/mercury_fulltext.git 1sudo docker cp mercury_fulltext [[CONTAINER ID]]:/var/www/plugins 在 RSS 设置配置 mercury_fulltext 插件。 多客户端支持（模拟 Fever）安装插件： 1git clone https://github.com/rannen/tinytinyrss-fever-plugin.git 1sudo docker cp ~/tinytinyrss-fever-plugin/fever [[CONTAINER ID]]:/var/www/plugins 安装后，在 Tiny Tiny RSS 的设置页面启用名为 fever 的插件。保存后，再次进入设置时，Preference 选项卡下会多出一个名为 Fever Emulation 的板块。在该板块的文本框中，设置一个专用于该插件的密码，然后点击 Save。该文本框下方同时给出了一个独立的服务器地址，其格式类似于 http://rss.example.org/plugins/fever/； 将其记下以备后用。 这时，在 Reeder 等 app 中，只要在添加 RSS 账号时选择 Fever，在服务器地址栏填入上述地址，用户名填写 admin，密码是以上设定的密码，即可配合这些你惯用的 app 使用 Tiny Tiny RSS 了；文件夹、标为已读、星标等功能均被良好支持。]]></content>
      <categories>
        <category>Tech</category>
      </categories>
      <tags>
        <tag>ttrss</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[VPS 装配笔记]]></title>
    <url>%2F2018%2F08%2F13%2FVPS%20%E8%A3%85%E9%85%8D%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[1. 前期按照既定格式为 VPS 主机命名，约定格式为： 主机商/平台名三位缩略字母 - 主机所在国家/城市名两位缩略字母 + 数字编号 如 Google Cloud Platform 为 gcp，GigsgigsCloud 为 ggs，Vultr 为 vtr，以此类推；地名如 Taiwan 为 tw，Tokyo 为 tk。故有 gcp-tw、ggs-hk、vtr-nj1 等，主机名全部使用小写。 考虑到部分主机商的 CentOS 和 Debian 有大大小小的问题，故操作系统首选 Ubuntu 最新版本，保守选择 Ubuntu 16.04 LTS（Xenial Xerus）。 2. 关键信息预存首先存储 IP 可以方便后续的使用。主机正常运行后，使用 LaunchBar 的 Snippets 存储 各个主机的外部 IP，以主机名的 首字母（重复则使用前两位） + 地名（数字编码） 共三或四位字母作为 Snippets 的快捷短语；如 gtw，gghk。 3. SSH 连接 生成公钥和私钥，必要时将公钥复制到主机的 SSH 添加处（~/.ssh/authorized_keys）。 1ssh-keygen -t rsa -f ~/.ssh/[[主机名]] -C [[用户名]] [[主机名]] 按照前期命名填写，[[用户名]] 为 changzhiga。 某些主机可能需要通过 ssh-copy-id 命令添加公钥： 1ssh-copy-id -i ~/.ssh/[[主机对应的公钥]] [[用户名]]@IP 公钥文件后缀为 .pub，[[用户名]] 为 changzhiga。 通过终端 SSH 登录 root 账户，使用 Auto Config 添加主机到 HyperApp。观察 HyperApp 的 Docker 状态是否异常，如异常则需考虑重新安装系统；一般情况下会显示无法找到 docker 命令，说明系统需要安装 Docker。同时在终端测试 sudo 和 docker 命令，进一步确认系统是否正常。 1ssh root@IP 确认系统正常后，在 root 账户下添加自定义用户并为其赋予 root 权限： 123adduser [[用户名]] \usermod -aG sudo [[用户名]] \su - [[用户名]] 设置免密码登录 往~/.ssh/config配置文件添加 ssh 服务器信息即可实现别名登录而无需记住用户名和 IP 地址： 1vim ~/.ssh/config 编辑如下： 12345Host alias # 自定义别名HostName hostname # ssh 服务器的 IP 或域名Port 22 # ssh 服务器的端口，默认为22User root # ssh 服务器用户名IdentityFile ~/.ssh/id_rsa # 第一步生成的公钥文件对应的私钥文件 最终，只需要在 Terminal 输入ssh alias即可。 延长 SSH 会话超时时间 服务器端配置 1vim /etc/ssh/sshd_config 找到以下配置（默认被注释掉，需要取消注释）： 12ClientAliveInterval 30ClientAliveCountMax 3 ClientAliveInterval：SSH Server 与 Client 的心跳超时时间。当客户端没有指令过来，Server 间隔 ClientAliveInterval 的时间（单位秒）会发一个空包到 Client 来维持心跳，保证 Session 有效。 ClientAliveCountMax：当心跳包发送失败时重试的次数，比如设置成了3，如果 Server 向 Client 连续发三次心跳包都失败了，就会断开这个 Session 连接。 修改完后重启 ssh 以使之生效： 1service ssh restart 客户端配置 比起修改服务器端的配置，修改客户端更加容易一些。 1~/.ssh/config 修改以下内容： 12345Host myhostshortcutHostName myhost.comUser rootServerAliveInterval 30ServerAliveCountMax 3 4. 一系列初始化脚本4.1 安装 Docker Ubuntu 设置仓库 更新 apt package index： 1sudo apt-get update 安装依赖包以允许 apt 通过 HTTPS 使用仓库： 12345sudo apt-get install \apt-transport-https \ca-certificates \curl \software-properties-common 添加 Docker 官方 GPG key： 1curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - 验证 GPG key 已安装： 1sudo apt-key fingerprint 0EBFCD88 显示以下内容说明安装成功： 1234pub 4096R/0EBFCD88 2017-02-22Key fingerprint = 9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88uid Docker Release (CE deb) &lt;docker@docker.com&gt;sub 4096R/F273FCD8 2017-02-22 安装 Docker 配置稳定版的仓库： 1234sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu \$(lsb_release -cs) \stable" 安装 Docker CE 更新 apt package index： 1sudo apt-get update 安装： 1sudo apt-get install docker-ce 测试是否安装成功： 1sudo docker run hello-world CentOS 设置仓库 安装 yum-utils： 1sudo yum install -y yum-utils 建立稳定的仓库： 123sudo yum-config-manager \--add-repo \https://docs.docker.com/v1.13/engine/installation/linux/repo_files/centos/docker.repo 安装 Docker 更新 yum package index： 1sudo yum makecache fast 安装最新版本的 Docker： 1sudo yum -y install docker-engine 运行 Docker： 1sudo systemctl start docker 测试运行状态： 1sudo docker run hello-world 4.2 使用 HyperApp 自动安装 BBR。4.3 使用一键脚本安装1wget --no-check-certificate -O ssss-U.sh https://raw.githubusercontent.com/uselibrary/Update_VPS/master/ssss-U.sh &amp;&amp; chmod +x ssss-U.sh &amp;&amp; bash ssss-U.sh 5. 后期 使用 HyperApp 安装各种所需的 App。 在 ~/.ssh/config 中添加 SSH 登录的快捷短语，同 Snippets 的规则一致。 Surge 中的节点命名规则为： 国旗 + 大写主机名 如 🇼🇸 GCP-TW、🇭🇰 GGS-HK。]]></content>
      <categories>
        <category>Tech</category>
      </categories>
      <tags>
        <tag>vps</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Raspberrypi 装配笔记]]></title>
    <url>%2F2018%2F08%2F13%2FRaspberrypi%20%E8%A3%85%E9%85%8D%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[1 镜像烧制 2 基础配置 2.1 SSH 连接 2.2 修改管理员密码 2.3 Samba 3 功能配置 3.1 Homebridge 1 镜像烧制 从树莓派官网下载最新的 Raspbian 系统镜像，通过 Etcher 烧录进 TF 卡中；如果不使用最新的 Debian 系统，可以烧录硬盘备份的 Debian Jessie 镜像。 烧制完成后，进入系统根目录 boot，新建无后缀的空脚本文件 ssh，再新建名为 wpa_supplicant.conf 的无线网络配置文件，其内容如下： 12345678910country=CNctrl_interface=DIR=/var/run/wpa_supplicantGROUP=netdevupdate_config=1network=&#123; ssid="[[Wi-Fi 名称]]" psk="[[Wi-Fi 密码]]" key_mgmt=WPA-PSK priority=1&#125; 完成以上步骤之后，即可拔出 TF 卡，将其插入树莓派中，接通电源，等待其自动连接上局域网。 2 基础配置2.1 SSH 连接在终端输入 ssh pi@192.168.X.X，初始密码为 raspberry。亦可参照 VPS 配置 SSH 的做法生成公钥和私钥来创建快捷短语。 2.2 修改管理员密码1passwd pi 2.3 Samba修改系统软件源为阿里云： 1sudo nano /etc/apt/sources.list 将 deb 后的 URL 修改为 http://mirrors.aliyun.com/raspbian/raspbian/。 刷新软件列表： 1sudo apt-get update 安装 Samba 及其依赖： 1sudo apt-get install samba samba-common-bin 修改 Samba 的配置文件： 1sudo nano /etc/samba/smb.conf 在配置文件的最后加上： 123456789101112131415[pi] path = /home/pi/ valid users = pi browseable = Yes writeable = Yes writelist = pi create mask = 0777 directory mask = 0777 保存，重新运行 Samba 服务： 1sudo /etc/init.d/samba restart 添加 pi 用户为 Samba 用户： 1sudo smbpasswd -a pi 3 功能配置3.1 Homebridge项目地址： Homebridge Homebridge-Mi-Aqara Homebridge-Yeelight Homebridge-Mi-Philips-Light 安装 NodeJS： 12curl -sL https://deb.nodesource.com/setup_7.x | sudo -E bash - sudo apt-get install -y nodejs 安装 Avahi： 1sudo apt-get install libavahi-compat-libdnssd-dev 安装 Homebridge 本体和插件： 1234sudo npm install -g --unsafe-perm homebridge # Stretch 需要加入 --unsafe-perm 参数 sudo npm install -g --unsafe-perm homebridge-mi-aqara # Aqara 平台插件，用于网关及其连接件 sudo npm install -g --unsafe-perm homebridge-yeelight # Yeelight 灯光系统插件sudo npm install -g --unsafe-perm homebridge-mi-philips-light # Philips 灯光系统插件 安装完成后运行 homebridge -D 检查是否能正常运行。 编辑配置文件： 123mkdir ~/.homebridge # 如果已经创建则跳过cd ~/.homebridgesudo nano config.json 编辑配置文件如下： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859&#123; "bridge": &#123; "name": "HomeBridge", "username": "B8:27:EB:EE:AF:1B", "port": 51888, "pin": "199-50-228" &#125;, "platforms": [&#123; "platform": "MiAqaraPlatform", "gateways": &#123; "34ce009525c9": "B51730D119334789" &#125;, "defaultValue": &#123; "158d000227648c": &#123; "MotionSensor_MotionSensor": &#123; "name": "Motion Sensor" &#125; &#125;, "158d00019d3a9b": &#123; "Global": &#123; "disable": true &#125;, "Button_StatelessProgrammableSwitch": &#123; "name": "Desktop Button", "disable": false &#125;, "Button_Switch_VirtualSinglePress": &#123; "name": "Single Press" &#125;, "Button_Switch_VirtualDoublePress": &#123; "name": "Double Press" &#125; &#125;, "158d00019cb82c": &#123; "TemperatureAndHumiditySensor_TemperatureSensor": &#123; "name": "Temperature" &#125;, "TemperatureAndHumiditySensor_HumiditySensor": &#123; "name": "Humidity" &#125; &#125; &#125; &#125;, &#123; "platform": "yeelight", "name": "Lightstrip" &#125;, &#123; "platform": "MiPhilipsLightPlatform", "deviceCfgs": [&#123; "type": "MiPhilipsSmartBulb", "ip": "192.168.31.114", "token": "7b2c6803b67b99f9b7a250cd919858dc", "lightName": "Bulb", "lightDisable": false &#125;] &#125; ]&#125; 保存退出，试运行：homebridge -D 使用 Screen 保持 Homebridge 在后台运行： 1sudo apt-get install screen 安装完后，运行 screen -S homebdg，在窗口里运行 Homebridge。]]></content>
      <categories>
        <category>Tech</category>
      </categories>
      <tags>
        <tag>raspberrypi</tag>
      </tags>
  </entry>
</search>
